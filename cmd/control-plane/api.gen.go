// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ConnectionConfig defines model for ConnectionConfig.
type ConnectionConfig = string

// Error defines model for Error.
type Error struct {
	Error struct {
		// Human-readable error description
		Message string `json:"message"`
	} `json:"error"`
}

// GetConnectionResponse defines model for GetConnectionResponse.
type GetConnectionResponse struct {
	Config ConnectionConfig `json:"config"`
}

// ListTargetsResponse defines model for ListTargetsResponse.
type ListTargetsResponse = []struct {
	Name string `json:"name"`
}

// NewConnectionRequest defines model for NewConnectionRequest.
type NewConnectionRequest struct {
	// human-readable machine name
	Name string `json:"name"`
}

// NewConnectionResponse defines model for NewConnectionResponse.
type NewConnectionResponse struct {
	Config ConnectionConfig `json:"config"`
	Id     *string          `json:"id,omitempty"`
}

// Id defines model for id.
type Id = string

// Target defines model for target.
type Target = string

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// GetAuthLoginParams defines parameters for GetAuthLogin.
type GetAuthLoginParams struct {
	// URL to redirect to on auth success
	Callback string `form:"callback" json:"callback"`
}

// PostTargetTargetConnectionJSONBody defines parameters for PostTargetTargetConnection.
type PostTargetTargetConnectionJSONBody = NewConnectionRequest

// PostTargetTargetConnectionJSONRequestBody defines body for PostTargetTargetConnection for application/json ContentType.
type PostTargetTargetConnectionJSONRequestBody = PostTargetTargetConnectionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User login page
	// (GET /auth/login)
	GetAuthLogin(c *gin.Context, params GetAuthLoginParams)
	// Returns available connection targets
	// (GET /target/)
	GetTarget(c *gin.Context)
	// Creates a new device connection on a target
	// (POST /target/{target}/connection)
	PostTargetTargetConnection(c *gin.Context, target Target)

	// (GET /target/{target}/connection/{id})
	GetTargetTargetConnectionId(c *gin.Context, target Target, id Id)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) GetAuthLogin(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthLoginParams

	// ------------- Required query parameter "callback" -------------
	if paramValue := c.Query("callback"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument callback is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "callback", c.Request.URL.Query(), &params.Callback)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter callback: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAuthLogin(c, params)
}

// GetTarget operation middleware
func (siw *ServerInterfaceWrapper) GetTarget(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTarget(c)
}

// PostTargetTargetConnection operation middleware
func (siw *ServerInterfaceWrapper) PostTargetTargetConnection(c *gin.Context) {

	var err error

	// ------------- Path parameter "target" -------------
	var target Target

	err = runtime.BindStyledParameter("simple", false, "target", c.Param("target"), &target)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter target: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostTargetTargetConnection(c, target)
}

// GetTargetTargetConnectionId operation middleware
func (siw *ServerInterfaceWrapper) GetTargetTargetConnectionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "target" -------------
	var target Target

	err = runtime.BindStyledParameter("simple", false, "target", c.Param("target"), &target)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter target: %s", err)})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTargetTargetConnectionId(c, target, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/auth/login", wrapper.GetAuthLogin)

	router.GET(options.BaseURL+"/target/", wrapper.GetTarget)

	router.POST(options.BaseURL+"/target/:target/connection", wrapper.PostTargetTargetConnection)

	router.GET(options.BaseURL+"/target/:target/connection/:id", wrapper.GetTargetTargetConnectionId)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWT3P6NhD9Khq1p9/4h0nSk3tKmU7LlEmZNO0l5SDkBSuxJWe1JkMZf/eOJIMxNqHp",
	"0F74I613n97bffKOS1OURoMmy5MdLwWKAgjQ/1Op/9Q84aWgjEdciwJ44jYijvBWKYSUJ4QVRNzKDArh",
	"nqBt6aIsodJrXtcRJ4FroDPZms3PZKxdsC2NtuCR/q5FRZlB9Rd4zNJoAu0LirLMlRSkjI5frNFurU38",
	"LcKKJ/ybuOUhDrs2/hHRYCiWgpWoSpeEJ91qbrt5wiWcGK1BusCJ0Su1HkAf8ZDZ8Y2mBCQVTgHDywVY",
	"K9bgfnZx/FwVQn9FEKlY5sD84+w4JBqQoiX5+ZB5cQg0yxeQ1AsMyPphEf8JqD3yY6NJ/wzyQMZHjPfI",
	"O8XRpBkCMlOWnnwn2WMYiqCwfTyh9XYX+PFRQ8WaBYEotu7/A7wfs/BWgaXzRbsqZl0VCyEzpYH54EsC",
	"qhQ0qZUC3I/TENoTdNfWKGqM4mOoZ6Vz8wOyQkXb31yNAGYJAgHvK8oOA+seCsstLxlRGUZU6ZXxKBTl",
	"bgf/mD+widGEJmfzXGhg9/Mpj/gG0Abmb0Zjh96UoEWpeMLvRuPRLY+8P3kUsRv0ODdr5X2j8bATN7CA",
	"zIewUqyBfWUWdMooA1a5rQwQmNJMsCWad7dChq2BmNDMpWdkXkF//6emTFmmLPuiDX1xu/fzKUNTEYy4",
	"R4nexaYpT9zYOW5mHlnU8e3nHsDHmSuJkCoESe63aUrbSkqwlkfBl98qwG1rzFLk+VLI109Z8+LEmu/G",
	"t33OZge6gv5VUQjc9sn0u3G4IOIjBXpkPLV3yFHt2/H4arfBkL8M3A2//tLpaC/HcS8/LxxD7YEfgSrU",
	"lomNULk3AHkYMBYObjss7MJ3HbdxfpSNHWBmbvagw2c7vP2mGTp8G9KU50Ffb3A/mHR7NXoHHbTumohr",
	"vfo/lHjYJ8+IHPHvxjfnMh4gxv13hX/aGRMEQWCZYBreWQobJTvN4WaY7VX5uEHinUrry+Nz2iPT9F93",
	"SXQxUqW85xXXFHP4xeT/FLMOEbjZc1dh3lxZNonjndKWhJZQx6JU8eaG14v67wAAAP//olFYG5ELAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
